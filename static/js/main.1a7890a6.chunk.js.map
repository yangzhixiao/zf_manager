{"version":3,"sources":["ZFList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DOMAIN","ZFList","state","data","loading","handleDownloadClick","id","window","open","fetchData","_callee","ret","regenerator_default","a","wrap","_context","prev","next","_this","setState","fetch","sent","stop","this","_this2","_this$state","react","table","style","padding","rowKey","dataSource","pagination","position","pageSize","columns","title","dataIndex","render","t","r","i","lineHeight","marginBottom","marginLeft","concat","updatetime","imgs","split","map","key","href","target","rel","margin","alt","src","replace","width","es_button","type","onClick","React","App","react_default","createElement","ZFList_ZFList","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAGMA,EAAS,GAGMC,6MAEZC,MAAQ,CACbC,KAAM,GACNC,SAAS,KA4DJC,oBAAsB,SAACC,GAC5BC,OAAOC,KAAKR,EAAS,aAAeM,EAAI,aAGnCG,+BAAY,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjBC,EAAKC,SAAS,CAAEf,SAAS,IADRW,EAAAE,KAAA,EAECG,MAAMpB,EAAS,aAFhB,OAEXW,EAFWI,EAAAM,KAGjBH,EAAKC,SAAS,CAAEhB,KAAMQ,EAAKP,SAAS,IAHnB,wBAAAW,EAAAO,SAAAZ,yFA5DjBa,KAAKd,6CAIS,IAAAe,EAAAD,KAAAE,EACYF,KAAKrB,MAAvBC,EADMsB,EACNtB,KAAMC,EADAqB,EACArB,QACd,OACEsB,EAAA,cAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,QAAS,QAClBC,OAAO,KACP1B,QAASA,EACT2B,WAAY5B,EACZ6B,WAAY,CAAEC,SAAU,SAAUC,SAAU,GAC5CC,QAAS,CACP,CAAEC,MAAO,eAAMC,UAAW,OACxBC,OAAQ,SAACC,EAAQC,EAAQC,GACvB,OACEf,EAAA,yBACEA,EAAA,qBAAKE,MAAO,CAACc,WAAY,OAAQC,aAAc,MAAOC,WAAY,SAAlE,GAAAC,OACML,EAAEM,WADR,KAAAD,OACsBL,EAAEJ,QAEvBI,EAAEO,MAAQP,EAAEO,KAAKC,MAAM,KAAKC,IAAI,SAACR,GAAD,OAC/Bf,EAAA,mBACEwB,IAAKT,EACLU,KAAMnD,EAAS,kBAAoByC,EACnCW,OAAO,SACPC,IAAI,uBAEJ3B,EAAA,qBACEE,MAAO,CAAC0B,OAAQ,OAChBC,IAAKd,EACLe,IAAKxD,EAAS,kBAAoByC,EAAEgB,QAAQ,OAAQ,sBAQlE,CAAErB,MAAO,eAAMC,UAAW,KAAMqB,MAAO,IACrCpB,OAAQ,SAACC,EAAQC,EAAQC,GACvB,OACEf,EAAA,cAACiC,EAAA,EAAD,CACEC,KAAK,UACLC,QAAS,kBAAMrC,EAAKnB,oBAAoBmC,EAAElC,MAF5C,wCAlDoBwD,aCKrBC,UANO,WACpB,OACEC,EAAAnD,EAAAoD,cAACC,EAAD,QCKgBC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DCZNC,IAASjC,OAAO0B,EAAAnD,EAAAoD,cAACO,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a7890a6.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Table, Button } from 'antd'\n\nconst DOMAIN = ''\n// const DOMAIN = 'http://localhost:5000'\n\nexport default class ZFList extends React.Component<any, any> {\n\n  public state = {\n    data: [],\n    loading: false,\n  }\n\n  public componentDidMount() {\n    this.fetchData()\n    // this.setState({ data: data })\n  }\n\n  public render() {\n    const { data, loading } = this.state\n    return (\n      <Table\n        style={{ padding: '15px' }}\n        rowKey='id'\n        loading={loading}\n        dataSource={data}\n        pagination={{ position: 'bottom', pageSize: 8, }}\n        columns={[\n          { title: '图片', dataIndex: 'imgs', \n            render: (t: any, r: any, i: number) => {\n              return (\n                <div>\n                  <div style={{lineHeight: '20px', marginBottom: '5px', marginLeft: '10px'}}>\n                    {`${r.updatetime} ${r.title}`}\n                  </div>\n                  {r.imgs && r.imgs.split(',').map((i: string) => \n                    <a\n                      key={i}\n                      href={DOMAIN + '/static/images/' + i}\n                      target='_blank'\n                      rel=\"noopener noreferrer\"\n                    >\n                      <img\n                        style={{margin: '5px'}}\n                        alt={i}\n                        src={DOMAIN + '/static/images/' + i.replace('.jpg', '_thumb.jpg')} \n                      />\n                    </a>\n                  )}\n                </div>\n              )\n            }\n          },\n          { title: '操作', dataIndex: 'id', width: 150,\n            render: (t: any, r: any, i: number) => {\n              return (\n                <Button\n                  type='primary'\n                  onClick={() => this.handleDownloadClick(r.id)}\n                >\n                  下载图片\n                </Button>\n              )\n            }\n          },\n        ]}\n      />\n    )\n  }\n\n  public handleDownloadClick = (id: string) => {\n    window.open(DOMAIN + '/download/' + id, '_blank')\n  }\n\n  public fetchData = async () => {\n    this.setState({ loading: true })\n    const ret = await fetch(DOMAIN + '/api/list')\n    this.setState({ data: ret, loading: false })\n  }\n}","import React from 'react';\nimport './App.css';\nimport ZFList from './ZFList';\nimport 'antd/dist/antd.css';\n\nconst App: React.FC = () => {\n  return (\n    <ZFList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}